{"ast":null,"code":"import _objectSpread from \"A:\\\\complete-react\\\\integration-backend\\\\kitshop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport firebase from \"firebase/app\"; // attach to firebase keyword\n\nimport \"firebase/firestore\";\nimport \"firebase/auth\"; // https://firebase.google.com/docs/auth/web/google-signin\n// Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBBLL21gVuPtIC5kgIiwStTsIHDKsSHDEc\",\n  authDomain: \"crwn-db-5bc4f.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-5bc4f.firebaseio.com\",\n  projectId: \"crwn-db-5bc4f\",\n  storageBucket: \"crwn-db-5bc4f.appspot.com\",\n  messagingSenderId: \"163208792545\",\n  appId: \"1:163208792545:web:74d5fdc4c31483367faaa0\",\n  measurementId: \"G-VFXKJ14CL2\"\n}; // async function get parameter\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // if no user Auth exit function\n  if (!userAuth) return; // from fire store there is 2 way to query 1 queryReference 2 querySnapshot; return object reference and snapshot reference (to detect is there data ?); ether Document or Collection\n  // in order for us to create we use documentReference\n  // to create, retrive, update, delete\n  // snap shot represent the data\n  // .get give us snapshotobject\n  // documentRef.get() or collectionRef.get()\n  // other CRUD .set()  .get()  .update()  .delete()\n\n  const userRef = firestore.doc(\"users/\".concat(userAuth.uid)); //document reference\n\n  const snapshot = await userRef.get(); // exists to check weather or not that data exist in database\n\n  if (!snapshot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createAt\n      }, additionalData));\n    } catch (error) {\n      console.log(\"error create user\", error.message);\n    }\n  }\n\n  return userRef;\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig);\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n}; // everything that relate to auth\n\nexport const auth = firebase.auth(); // fire store for firebase\n\nexport const firestore = firebase.firestore(); // USE CASE EXAMPLE for firestore (DB)\n// firestore.collection(\"user\").doc(\"SADQWDASDXCZXC\").collection(\"cartItem\");\n// firestore.doc(\"/user/SADQWDASDXCZXC\");\n// firestore.collection(\"/user/SADQWDASDXCZXC/cartItem\");\n\nfirebase.auth().useDeviceLanguage();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider(); // The authorization server prompts the user to select a user account.\n\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  console.log(transformedCollection); // convert to object\n\n  return transformedCollection.reduce((acc, collection) => {\n    acc[collection.title.toLowerCase()] = collection;\n    return acc;\n  }, {});\n};\nexport default firebase;","map":{"version":3,"sources":["A:/complete-react/integration-backend/kitshop/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createAt","Date","set","error","console","log","message","initializeApp","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","useDeviceLanguage","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","acc","collection"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\r\n// attach to firebase keyword\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\n// https://firebase.google.com/docs/auth/web/google-signin\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBBLL21gVuPtIC5kgIiwStTsIHDKsSHDEc\",\r\n  authDomain: \"crwn-db-5bc4f.firebaseapp.com\",\r\n  databaseURL: \"https://crwn-db-5bc4f.firebaseio.com\",\r\n  projectId: \"crwn-db-5bc4f\",\r\n  storageBucket: \"crwn-db-5bc4f.appspot.com\",\r\n  messagingSenderId: \"163208792545\",\r\n  appId: \"1:163208792545:web:74d5fdc4c31483367faaa0\",\r\n  measurementId: \"G-VFXKJ14CL2\",\r\n};\r\n\r\n// async function get parameter\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  // if no user Auth exit function\r\n  if (!userAuth) return;\r\n  // from fire store there is 2 way to query 1 queryReference 2 querySnapshot; return object reference and snapshot reference (to detect is there data ?); ether Document or Collection\r\n\r\n  // in order for us to create we use documentReference\r\n  // to create, retrive, update, delete\r\n\r\n  // snap shot represent the data\r\n  // .get give us snapshotobject\r\n  // documentRef.get() or collectionRef.get()\r\n  // other CRUD .set()  .get()  .update()  .delete()\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`); //document reference\r\n  const snapshot = await userRef.get();\r\n\r\n  // exists to check weather or not that data exist in database\r\n  if (!snapshot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createAt = new Date();\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createAt,\r\n        ...additionalData,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error create user\", error.message);\r\n    }\r\n  }\r\n  return userRef;\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const getCurrentUser = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\r\n      unsubscribe();\r\n      resolve(userAuth);\r\n    }, reject);\r\n  });\r\n};\r\n\r\n// everything that relate to auth\r\nexport const auth = firebase.auth();\r\n\r\n// fire store for firebase\r\nexport const firestore = firebase.firestore();\r\n\r\n// USE CASE EXAMPLE for firestore (DB)\r\n// firestore.collection(\"user\").doc(\"SADQWDASDXCZXC\").collection(\"cartItem\");\r\n// firestore.doc(\"/user/SADQWDASDXCZXC\");\r\n// firestore.collection(\"/user/SADQWDASDXCZXC/cartItem\");\r\n\r\nfirebase.auth().useDeviceLanguage();\r\n\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n\r\n// The authorization server prompts the user to select a user account.\r\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\r\n\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n  const transformedCollection = collections.docs.map((doc) => {\r\n    const { title, items } = doc.data();\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: doc.id,\r\n      title,\r\n      items,\r\n    };\r\n  });\r\n  console.log(transformedCollection);\r\n  // convert to object\r\n  return transformedCollection.reduce((acc, collection) => {\r\n    acc[collection.title.toLowerCase()] = collection;\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}