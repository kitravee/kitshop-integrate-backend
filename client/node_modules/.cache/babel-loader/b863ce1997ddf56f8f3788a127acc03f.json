{"ast":null,"code":"import _objectSpread from \"A:\\\\complete-react\\\\integration-backend\\\\kitshop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport UserActionTypes from \"./user.types\"; // reducer\n\nconst INITIAL_STATE = {\n  currentUser: null,\n  error: null\n}; // action = {type:\"\", payload:\"\"}\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  // in case of action type match\n  switch (action.type) {\n    case UserActionTypes.SIGN_IN_SUCCESS:\n      return _objectSpread({}, state, {\n        currentUser: action.payload,\n        error: null\n      });\n\n    case UserActionTypes.SIGN_OUT_SUCCESS:\n      return _objectSpread({}, state, {\n        currentUser: null,\n        error: null\n      });\n\n    case UserActionTypes.SIGN_UP_SUCCESS:\n      return _objectSpread({}, state, {\n        currentUser: action.payload,\n        error: null\n      });\n\n    case UserActionTypes.SIGN_IN_FAILURE:\n    case UserActionTypes.SIGN_OUT_FAILURE:\n    case UserActionTypes.SIGN_UP_FAILURE:\n      return _objectSpread({}, state, {\n        error: action.payload\n      });\n    // ##every single reducer gets every single action that ever gets fired,\n    // ##even if those action are not related to this reducer\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;","map":{"version":3,"sources":["A:/complete-react/integration-backend/kitshop/client/src/redux/user/user.reducer.js"],"names":["UserActionTypes","INITIAL_STATE","currentUser","error","userReducer","state","action","type","SIGN_IN_SUCCESS","payload","SIGN_OUT_SUCCESS","SIGN_UP_SUCCESS","SIGN_IN_FAILURE","SIGN_OUT_FAILURE","SIGN_UP_FAILURE"],"mappings":";AAAA,OAAOA,eAAP,MAA4B,cAA5B,C,CAEA;;AACA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,WAAW,EAAE,IADO;AAEpBC,EAAAA,KAAK,EAAE;AAFa,CAAtB,C,CAKA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,aAAT,EAAwBK,MAAxB,KAAmC;AACrD;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,eAAe,CAACQ,eAArB;AACE,+BACKH,KADL;AAEEH,QAAAA,WAAW,EAAEI,MAAM,CAACG,OAFtB;AAGEN,QAAAA,KAAK,EAAE;AAHT;;AAKF,SAAKH,eAAe,CAACU,gBAArB;AACE,+BACKL,KADL;AAEEH,QAAAA,WAAW,EAAE,IAFf;AAGEC,QAAAA,KAAK,EAAE;AAHT;;AAKF,SAAKH,eAAe,CAACW,eAArB;AACE,+BACKN,KADL;AAEEH,QAAAA,WAAW,EAAEI,MAAM,CAACG,OAFtB;AAGEN,QAAAA,KAAK,EAAE;AAHT;;AAKF,SAAKH,eAAe,CAACY,eAArB;AACA,SAAKZ,eAAe,CAACa,gBAArB;AACA,SAAKb,eAAe,CAACc,eAArB;AACE,+BACKT,KADL;AAEEF,QAAAA,KAAK,EAAEG,MAAM,CAACG;AAFhB;AAIF;AACA;;AACA;AACE,aAAOJ,KAAP;AA7BJ;AA+BD,CAjCD;;AAmCA,eAAeD,WAAf","sourcesContent":["import UserActionTypes from \"./user.types\";\r\n\r\n// reducer\r\nconst INITIAL_STATE = {\r\n  currentUser: null,\r\n  error: null,\r\n};\r\n\r\n// action = {type:\"\", payload:\"\"}\r\nconst userReducer = (state = INITIAL_STATE, action) => {\r\n  // in case of action type match\r\n  switch (action.type) {\r\n    case UserActionTypes.SIGN_IN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        currentUser: action.payload,\r\n        error: null,\r\n      };\r\n    case UserActionTypes.SIGN_OUT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        currentUser: null,\r\n        error: null,\r\n      };\r\n    case UserActionTypes.SIGN_UP_SUCCESS:\r\n      return {\r\n        ...state,\r\n        currentUser: action.payload,\r\n        error: null,\r\n      };\r\n    case UserActionTypes.SIGN_IN_FAILURE:\r\n    case UserActionTypes.SIGN_OUT_FAILURE:\r\n    case UserActionTypes.SIGN_UP_FAILURE:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n    // ##every single reducer gets every single action that ever gets fired,\r\n    // ##even if those action are not related to this reducer\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userReducer;\r\n"]},"metadata":{},"sourceType":"module"}